# Generated by Django 4.1 on 2022-08-19 12:08

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('activity_id', models.AutoField(primary_key=True, serialize=False)),
                ('activity_kind', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'activity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Activity_Species',
            fields=[
                ('activity_species_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'activity_species',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Continent',
            fields=[
                ('continent_id', models.AutoField(primary_key=True, serialize=False)),
                ('continent_name', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'continent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('country_id', models.AutoField(primary_key=True, serialize=False)),
                ('country_name', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'country',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('family_id', models.AutoField(primary_key=True, serialize=False)),
                ('family_name', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'family',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Genus',
            fields=[
                ('genus_id', models.AutoField(primary_key=True, serialize=False)),
                ('genus_name', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'genus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Geo_Location',
            fields=[
                ('geo_location_id', models.AutoField(primary_key=True, serialize=False)),
                ('region_name', models.CharField(blank=True, max_length=200, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'geo_location',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Geo_Location_Species',
            fields=[
                ('geo_location_species_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'geo_location_species',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IUCN',
            fields=[
                ('iucn_id', models.AutoField(primary_key=True, serialize=False)),
                ('iucn_status', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'iucn',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Micro_Habitat',
            fields=[
                ('micro_habitat_id', models.AutoField(primary_key=True, serialize=False)),
                ('micro_habitat_name', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'micro_habitat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Micro_Habitat_Species',
            fields=[
                ('micro_habitat_species_id', models.AutoField(primary_key=True, serialize=False)),
                ('micro_habitat_pref_rank', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'micro_habitat_species',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Nesting_Site',
            fields=[
                ('nesting_site_id', models.AutoField(primary_key=True, serialize=False)),
                ('nesting_site_desc', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'nesting_site',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Nesting_Site_Species',
            fields=[
                ('nesting_site_species_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'nesting_site_species',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Order_Taxon',
            fields=[
                ('order_id', models.AutoField(primary_key=True, serialize=False)),
                ('order_taxon_name', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'order_taxon',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Parity_Mode',
            fields=[
                ('parity_mode_id', models.AutoField(primary_key=True, serialize=False)),
                ('parity_mode_desc', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'parity_mode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pop_Trend',
            fields=[
                ('pop_trend_id', models.AutoField(primary_key=True, serialize=False)),
                ('pop_trend_status', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'pop_trend',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('species_id', models.AutoField(primary_key=True, serialize=False)),
                ('species_name_common', models.CharField(blank=True, max_length=200, null=True)),
                ('species_name_latin', models.CharField(blank=True, max_length=200, null=True)),
                ('size_max_male', models.FloatField(blank=True, null=True)),
                ('size_max_female', models.FloatField(blank=True, null=True)),
                ('size_max_record', models.FloatField(blank=True, null=True)),
                ('longevity', models.FloatField(blank=True, null=True)),
                ('clutch_min', models.FloatField(blank=True, null=True)),
                ('clutch_max', models.FloatField(blank=True, null=True)),
                ('clutch_avg', models.FloatField(blank=True, null=True)),
                ('egg_diameter', models.FloatField(blank=True, null=True)),
                ('range_size', models.FloatField(blank=True, null=True)),
                ('elevation_min', models.IntegerField(blank=True, null=True)),
                ('elevation_max', models.FloatField(blank=True, null=True)),
                ('elevation_avg', models.FloatField(blank=True, null=True)),
                ('genus', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='home.genus')),
                ('iucn', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='home.iucn')),
                ('parity_mode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='home.parity_mode')),
                ('pop_trend', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='home.pop_trend')),
            ],
            options={
                'db_table': 'species',
                'managed': True,
            },
        ),
    ]
